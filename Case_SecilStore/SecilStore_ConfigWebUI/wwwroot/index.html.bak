<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SecilStore Configuration Manager</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <style>
        body {
            padding: 20px;
            font-family: Arial, sans-serif;
        }
        .table-container {
            margin-top: 20px;
        }
        .btn-action {
            margin-right: 5px;
        }
        .form-container {
            margin-top: 30px;
            margin-bottom: 30px;
            padding: 20px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f9f9f9;
        }
        .header {
            margin-bottom: 30px;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>SecilStore Configuration Manager</h1>
            <p>Manage your application configurations from a central location</p>
        </div>

        <div class="table-container">
            <h3>Configuration Entries</h3>
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Type</th>
                        <th>Value</th>
                        <th>IsActive</th>
                        <th>ApplicationName</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody id="configTableBody">
                    <!-- Configuration items will be loaded here -->
                </tbody>
            </table>
        </div>

        <div class="form-container">
            <h3 id="formTitle">Add New Configuration</h3>
            <form id="configForm">
                <input type="hidden" id="configId">
                <div class="mb-3">
                    <label for="name" class="form-label">Name</label>
                    <input type="text" class="form-control" id="name" required>
                </div>
                <div class="mb-3">
                    <label for="value" class="form-label">Value</label>
                    <input type="text" class="form-control" id="value" required>
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Type</label>
                    <select class="form-control" id="type" required>
                        <option value="string">string</option>
                        <option value="int">int</option>
                        <option value="bool">bool</option>
                        <option value="double">double</option>
                    </select>
                </div>
                <div class="mb-3 form-check">
                    <input type="checkbox" class="form-check-input" id="isActive" checked>
                    <label class="form-check-label" for="isActive">Is Active</label>
                </div>
                <div class="mb-3">
                    <label for="applicationName" class="form-label">Application Name</label>
                    <input type="text" class="form-control" id="applicationName" required>
                </div>
                <button type="submit" class="btn btn-primary" id="saveBtn">Save</button>
                <button type="button" class="btn btn-secondary" id="cancelBtn" style="display:none;">Cancel</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load configurations when the page loads
            loadConfigurations();

            // Handle form submission
            document.getElementById('configForm').addEventListener('submit', function(e) {
                e.preventDefault();
                saveConfiguration();
            });

            // Handle cancel button
            document.getElementById('cancelBtn').addEventListener('click', function() {
                resetForm();
            });
        });

        function loadConfigurations() {
            fetch('/api/configurations')
                .then(response => response.json())
                .then(data => {
                    const tableBody = document.getElementById('configTableBody');
                    tableBody.innerHTML = '';

                    data.forEach(config => {
                        const row = document.createElement('tr');
                        
                        // Create cells in the exact order as required
                        row.innerHTML = `
                            <td>${config.id}</td>
                            <td>${config.name}</td>
                            <td>${config.type}</td>
                            <td>${config.value}</td>
                            <td>${config.isActive ? '1' : '0'}</td>
                            <td>${config.applicationName}</td>
                            <td>
                                <button class="btn btn-sm btn-primary btn-action" onclick="editConfig('${config.id}')">Edit</button>
                                <button class="btn btn-sm btn-danger btn-action" onclick="deleteConfig('${config.id}')">Delete</button>
                            </td>
                        `;
                        tableBody.appendChild(row);
                    });
                })
                .catch(error => console.error('Error loading configurations:', error));
        }

        function editConfig(id) {
            fetch(`/api/configurations`)
                .then(response => response.json())
                .then(data => {
                    const config = data.find(c => c.id === id);
                    if (config) {
                        document.getElementById('configId').value = config.id;
                        document.getElementById('name').value = config.name;
                        document.getElementById('value').value = config.value;
                        document.getElementById('type').value = config.type;
                        document.getElementById('isActive').checked = config.isActive;
                        document.getElementById('applicationName').value = config.applicationName;
                        
                        document.getElementById('formTitle').textContent = 'Edit Configuration';
                        document.getElementById('saveBtn').textContent = 'Update';
                        document.getElementById('cancelBtn').style.display = 'inline-block';
                    }
                })
                .catch(error => console.error('Error fetching configuration:', error));
        }

        function deleteConfig(id) {
            if (confirm('Are you sure you want to delete this configuration?')) {
                fetch(`/api/configurations/${id}`, {
                    method: 'DELETE'
                })
                .then(response => {
                    if (response.ok) {
                        loadConfigurations();
                    } else {
                        alert('Failed to delete configuration');
                    }
                })
                .catch(error => console.error('Error deleting configuration:', error));
            }
        }

        function saveConfiguration() {
            const id = document.getElementById('configId').value;
            const config = {
                id: id || null,
                name: document.getElementById('name').value,
                value: document.getElementById('value').value,
                type: document.getElementById('type').value,
                isActive: document.getElementById('isActive').checked,
                applicationName: document.getElementById('applicationName').value
            };

            const method = id ? 'PUT' : 'POST';
            
            fetch('/api/configurations', {
                method: method,
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(config)
            })
            .then(response => {
                if (response.ok) {
                    resetForm();
                    loadConfigurations();
                } else {
                    alert('Failed to save configuration');
                }
            })
            .catch(error => console.error('Error saving configuration:', error));
        }

        function resetForm() {
            document.getElementById('configForm').reset();
            document.getElementById('configId').value = '';
            document.getElementById('formTitle').textContent = 'Add New Configuration';
            document.getElementById('saveBtn').textContent = 'Save';
            document.getElementById('cancelBtn').style.display = 'none';
        }
    </script>
</body>
</html> 